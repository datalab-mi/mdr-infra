heat_template_version: 2016-04-08

description: Simple template to deploy a single compute instance with an attached volume

parameters:

  image_name:
    type: string
    description: Name of a cloud image in the catalog
    default: Debian 9

  size_gb:
    type: string
    description: Size of the volume
    default: 4

  volume_id:
    type: string
    description: partition name
    default: "1d64fdfd-8480-4513-a212-27ed3cef3d65"

  os_auth_token:
    type: string
    label: openstack OS_AUTH_TOKEN
    default: token

resources:

  my_instance:
    type: OS::Nova::Server
    properties:
      name: test_server
      key_name: mdr
      security_groups:
        - {get_resource: the_sg}
      image: { get_param: image_name }
      flavor: s1-2
      networks:
        - network: Ext-Net
      user_data_format: RAW
      user_data: { get_resource: server_init }

  the_sg:
    type: OS::Neutron::SecurityGroup
    properties:
      name: the_sg
      description: Ping and SSH
      rules:
      - protocol: icmp
      - protocol: tcp
        port_range_min: 22
        port_range_max: 22

  server_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: one_init}
      - config: {get_resource: common_functions}
      - config: {get_resource: launch}
      - config: {get_resource: openrc}
      - config: {get_resource: data_volume_attachment}

  one_init:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        write_files:
        - path: /tmp/one
          content: "The one is bar"

  common_functions:
    type: "OS::Heat::CloudConfig"
    properties:
      cloud_config:
        merge_how: dict(recurse_array)+list(append)
        write_files:
        - path: /home/debian/common_functions.sh
          owner: debian:debian
          permissions: 0700
          content:
            str_replace:
              params:
                $data_storage: "token"
              template: { get_file: heat-templates/config-scripts/common_functions.sh }

  launch:
    type: "OS::Heat::CloudConfig"
    properties:
      cloud_config:
        merge_how: dict(recurse_array)+list(append)
        write_files:
        - path: /home/debian/launch.sh
          owner: debian:debian
          permissions: 0700
          content:
            str_replace:
              params:
                $data_storage: "token"
              template: { get_file: heat-templates/config-scripts/launch.sh }

  openrc:
    type: "OS::Heat::CloudConfig"
    properties:
      cloud_config:
        merge_how: dict(recurse_array)+list(append)
        write_files:
        - path: /home/debian/.openrc.sh
          owner: debian:debian
          permissions: 0600
          content:
            str_replace:
              params:
                $os_auth_token: { get_param: os_auth_token }
              template: { get_file: heat-templates/config-scripts/openrc.sh }


  data_volume_attachment:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config:
        str_replace:
          template: { get_file: heat-templates/config-scripts/data_volume_attachment.sh }
          params:
            $volume_id: { get_param: volume_id }


  my_attachment:
      type: OS::Cinder::VolumeAttachment
      properties:
        instance_uuid:  { get_resource: my_instance }
        volume_id: { get_param: volume_id }

outputs:
  my_instance:
    description: Name of the server
    value: { get_attr: [ my_instance, name ] }

  my_instance_ip:
    description: Name of the server
    value: { get_attr: [my_instance, networks, Ext-Net, 0] }

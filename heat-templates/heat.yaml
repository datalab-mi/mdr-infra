heat_template_version: 2016-04-08

description: >
 Template pour créer une instance

#####################################################################
##                                                                 ##
## DEFINITION DES PARAMETRES ET DE LEURS VALEURS PAR DEFAUT        ##
##                                                                 ##
#####################################################################
parameters:

  key_name:
    type: string
    description: Valeur de la clé publique SSH permettant d'accéder aux serveurs
    default: toto

  public_network:
    type: string
    description: ID reseau public
    default: Ext-Net

  image_name:
    type: string
    description: Glance Image
    default: Debian 9

  instance_type:
    type: string
    description: Flavor
    default: s1-2

  volume_size:
    type: string
    description: Taille du volume de données du serveur de preprop
    default: 10

  volume_type:
    type: string
    description: Type du volume de données du serveur de preprop
    default: vsa-z3

  os_auth_token:
    type: string
    label: openstack OS_AUTH_TOKEN
  os_storage_url:
    type: string
    label: openstack OS_STORAGE_URL
  app_version:
    type: string
    label: Git app branch, or tag to checkout on

  data_volume_id:
    type: string
    description: id for data volume created manually

  data_storage:
    type: string
    label: swift data_storage
  data_storage_token:
    type: string
    label: an openstack token

  wait_condition_timeout:
    type: number
    default: 43200
    description : >
      timeout for the Wait Conditions


resources:
  # Provide a curl CLI command to the cloud-init script.  Called on completion
  # to indicate the status of the cloud-init process
  wait_handle:
    type: OS::Heat::WaitConditionHandle

  # Wait for the node_boot (cloud-init) process to complete or time out
  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: {get_resource: wait_handle}
      timeout: {get_param: wait_condition_timeout}



#####################################################################
##                                                                 ##
## DEFINITION DU SERVEUR                                           ##
##                                                                 ##
#####################################################################
  mdr_server:
    type: OS::Nova::Server
    properties:
      name: dev_server
      flavor: { get_param: instance_type }
      key_name: { get_param: key_name }
      image: { get_param: image_name }
      networks:
        - network: { get_param: public_network }
      user_data_format: RAW
      user_data: { get_resource: postinstall_dev_server }

  postinstall_dev_server:
    type: "OS::Heat::MultipartMime"
    properties:
      parts:
        - config: { get_resource: included_files }
        - config: { get_resource: configure_dev_server }
        - config: { get_resource: back_postconf }
        - config: { get_resource: postinstall }

  included_files:
    type: "OS::Heat::CloudConfig"
    properties:
      cloud_config:
        merge_how: dict(recurse_array)+list(append)
        write_files:
        - path: /home/debian/common_functions.sh
          permissions: 0700
          content:
              params:
                $wc_notify: {get_attr: [wait_handle, curl_cli]}
              template: { get_file: config-scripts/common_functions.sh }
        - path: /home/debian/launch.sh
          owner: debian:debian
          permissions: 0700
          content:
            str_replace:
              params:
                $data_storage: { get_param: data_storage }
                $data_storage_token: { get_param: data_storage_token }
                $app_version: { get_param: app_version }
              template: { get_file: config-scripts/launch.sh }


  configure_dev_server:
    type: "OS::Heat::CloudConfig"
    properties:
      cloud_config:
        merge_how: dict(recurse_array)+list(append)
        write_files:
        - path: /home/debian/.openrc.sh
          owner: debian:debian
          permissions: 0600
          content:
            str_replace:
              params:
                $os_auth_token: { get_param: os_auth_token }
                $os_storage_url: { get_param: os_storage_url }
              template: { get_file: config-scripts/openrc.sh }

  back_postconf:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config:
        get_file: config-scripts/back_postconf.sh

  postinstall:
    type: "OS::Heat::SoftwareConfig"
    depends_on: back_postconf
    properties:
      group: ungrouped
      config:
        get_file: config-scripts/post_install.sh

  my_attachment:
      type: OS::Cinder::VolumeAttachment
      properties:
        instance_uuid:  { get_resource: mdr_server }
        volume_id: { get_param: data_volume_id }
        mountpoint: /dev/vdb

outputs:
  mdr_server:
    description: Name of the server
    value: { get_attr: [ mdr_server, name ] }

  mdr_server_ip:
    description: Name of the server
    value: { get_attr: [mdr_server, networks, { get_param: public_network }, 0] }

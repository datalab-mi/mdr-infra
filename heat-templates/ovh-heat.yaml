heat_template_version: 2016-04-08

description: Simple template to deploy a single compute instance with an attached volume

parameters:
  image_name:
    type: string
    description: Name of a cloud image in the catalog
    default: Debian 10 - Docker

  key_name:
    type: string
    description: Valeur de la clé publique SSH permettant d'accéder aux serveurs
    default: toto

  data_volume_id:
    type: string
    description: partition name
    default: "volume_id"

  os_auth_token:
    type: string
    label: openstack OS_AUTH_TOKEN
    default: token

  os_storage_url:
    type: string
    label: openstack OS_STORAGE_URL
    default: "storage_url"

  git_tag:
    type: string
    label: Git tag to pull
    default: "v0.2"

  flavor:
    type: string
    description: Flavor
    default: s1-2

  wait_condition_timeout:
    type: number
    default: 43200
    description : >
      timeout for the Wait Conditions

resources:
  # Provide a curl CLI command to the cloud-init script.  Called on completion
  # to indicate the status of the cloud-init process
  wait_handle:
    type: OS::Heat::WaitConditionHandle

  # Wait for the node_boot (cloud-init) process to complete or time out
  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: {get_resource: wait_handle}
      timeout: {get_param: wait_condition_timeout}

#####################################################################
##                                                                 ##
## DEFINITION DU SERVEUR                                           ##
##                                                                 ##
#####################################################################

  my_instance:
    type: OS::Nova::Server
    properties:
      name: test_server
      key_name: { get_param: key_name }
      security_groups:
        - {get_resource: the_sg}
      image: { get_param: image_name }
      flavor: { get_param: flavor }
      networks:
        - network: Ext-Net
      user_data_format: RAW
      user_data: { get_resource: server_init }

  the_sg:
    type: OS::Neutron::SecurityGroup
    properties:
      name: the_sg
      description: Ping and SSH
      rules:
      - protocol: icmp
      - protocol: tcp
        port_range_min: 22
        port_range_max: 22
      - remote_ip_prefix: "0.0.0.0/0"
        protocol: tcp
        port_range_min: 80
        port_range_max: 80
        direction: ingress

#####################################################################
##                                                                 ##
## DEFINITION DES SCRIPTS DE DEMARRAGE                             ##
##                                                                 ##
#####################################################################

  server_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: common_functions}
      - config: {get_resource: launch}
      - config: {get_resource: openrc}
      - config: {get_resource: data_volume_attachment}
      - config: {get_resource: back_postconf}
      - config: {get_resource: post_install}

  common_functions:
    type: "OS::Heat::CloudConfig"
    properties:
      cloud_config:
        merge_how: dict(recurse_array)+list(append)
        write_files:
        - path: /home/debian/common_functions.sh
          owner: debian:debian
          permissions: 0700
          content:
            str_replace:
              params:
                $wc_notify: {get_attr: [wait_handle, curl_cli]}
              template: { get_file: config-scripts/common_functions.sh }

  launch:
    type: "OS::Heat::CloudConfig"
    properties:
      cloud_config:
        merge_how: dict(recurse_array)+list(append)
        write_files:
        - path: /home/debian/launch.sh
          owner: debian:debian
          permissions: 0700
          content:
            str_replace:
              params:
                $git_tag: { get_param: git_tag }
              template: { get_file: config-scripts/launch.sh }

  openrc:
    type: "OS::Heat::CloudConfig"
    properties:
      cloud_config:
        merge_how: dict(recurse_array)+list(append)
        write_files:
        - path: /home/debian/.openrc.sh
          owner: debian:debian
          permissions: 0600
          content:
            str_replace:
              params:
                $os_auth_token: { get_param: os_auth_token }
                $os_storage_url: { get_param: os_storage_url }
              template: { get_file: config-scripts/openrc.sh }

  back_postconf:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config:
        get_file: config-scripts/back_postconf.sh

  post_install:
    type: "OS::Heat::SoftwareConfig"
    depends_on: back_postconf
    properties:
      group: ungrouped
      config:
        get_file: config-scripts/post_install.sh

#####################################################################
##                                                                 ##
## DEFINITION DU VOLUME                                            ##
##                                                                 ##
#####################################################################

  data_volume_attachment:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config:
        str_replace:
          template: { get_file: config-scripts/data_volume_attachment.sh }
          params:
            $data_volume_id: { get_param: data_volume_id }


  my_attachment:
      type: OS::Cinder::VolumeAttachment
      properties:
        instance_uuid:  { get_resource: my_instance }
        volume_id: { get_param: data_volume_id }

outputs:
  my_instance:
    description: Name of the server
    value: { get_attr: [ my_instance, name ] }

  my_instance_ip:
    description: Name of the server
    value: { get_attr: [my_instance, networks, Ext-Net, 0] }
